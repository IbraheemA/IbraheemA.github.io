import { forEach, setTimeout, noop, relativeNow, runOnReadyState } from '@datadog/browser-core';
import { computeRelativePerformanceTiming } from '../../../browser/performanceUtils';
import { createPerformanceObservable, RumPerformanceEntryType, supportPerformanceTimingEvent, } from '../../../browser/performanceObservable';
export function trackNavigationTimings(configuration, callback) {
    var processEntry = function (entry) {
        if (!isIncompleteNavigation(entry)) {
            callback(processNavigationEntry(entry));
        }
    };
    var stop = noop;
    if (supportPerformanceTimingEvent(RumPerformanceEntryType.NAVIGATION)) {
        ;
        (stop = createPerformanceObservable(configuration, {
            type: RumPerformanceEntryType.NAVIGATION,
            buffered: true,
        }).subscribe(function (entries) { return forEach(entries, processEntry); }).unsubscribe);
    }
    else {
        retrieveNavigationTiming(configuration, processEntry);
    }
    return { stop: stop };
}
function processNavigationEntry(entry) {
    return {
        domComplete: entry.domComplete,
        domContentLoaded: entry.domContentLoadedEventEnd,
        domInteractive: entry.domInteractive,
        loadEvent: entry.loadEventEnd,
        // In some cases the value reported is negative or is larger
        // than the current page time. Ignore these cases:
        // https://github.com/GoogleChrome/web-vitals/issues/137
        // https://github.com/GoogleChrome/web-vitals/issues/162
        firstByte: entry.responseStart >= 0 && entry.responseStart <= relativeNow() ? entry.responseStart : undefined,
    };
}
function isIncompleteNavigation(entry) {
    return entry.loadEventEnd <= 0;
}
function retrieveNavigationTiming(configuration, callback) {
    runOnReadyState(configuration, 'complete', function () {
        // Send it a bit after the actual load event, so the "loadEventEnd" timing is accurate
        setTimeout(function () { return callback(computeRelativePerformanceTiming()); });
    });
}
//# sourceMappingURL=trackNavigationTimings.js.map
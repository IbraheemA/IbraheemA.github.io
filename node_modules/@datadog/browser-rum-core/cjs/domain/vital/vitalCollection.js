"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startVitalCollection = startVitalCollection;
exports.createVitalInstance = createVitalInstance;
var browser_core_1 = require("@datadog/browser-core");
function startVitalCollection(lifeCycle, pageStateHistory) {
    function isValid(vital) {
        return !pageStateHistory.wasInPageStateDuringPeriod("frozen" /* PageState.FROZEN */, vital.startClocks.relative, vital.duration);
    }
    function addDurationVital(vital) {
        if (isValid(vital)) {
            lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, processVital(vital, true));
        }
    }
    return {
        addDurationVital: addDurationVital,
        startDurationVital: function (startVital) {
            return createVitalInstance(function (vital) {
                addDurationVital(vital);
            }, startVital);
        },
    };
}
function createVitalInstance(stopCallback, vitalStart) {
    var startClocks = (0, browser_core_1.clocksNow)();
    var stopClocks;
    return {
        stop: function (vitalStop) {
            if (stopClocks) {
                return;
            }
            stopClocks = (0, browser_core_1.clocksNow)();
            stopCallback(buildDurationVital(vitalStart, startClocks, vitalStop, stopClocks));
        },
    };
}
function buildDurationVital(vitalStart, startClocks, vitalStop, stopClocks) {
    var _a;
    if (vitalStop === void 0) { vitalStop = {}; }
    return {
        name: vitalStart.name,
        type: "duration" /* VitalType.DURATION */,
        startClocks: startClocks,
        duration: (0, browser_core_1.elapsed)(startClocks.timeStamp, stopClocks.timeStamp),
        context: (0, browser_core_1.combine)(vitalStart.context, vitalStop.context),
        details: (_a = vitalStop.details) !== null && _a !== void 0 ? _a : vitalStart.details,
    };
}
function processVital(vital, valueComputedBySdk) {
    var rawRumEvent = {
        date: vital.startClocks.timeStamp,
        vital: {
            id: (0, browser_core_1.generateUUID)(),
            type: vital.type,
            name: vital.name,
            duration: (0, browser_core_1.toServerDuration)(vital.duration),
            details: vital.details,
        },
        type: "vital" /* RumEventType.VITAL */,
    };
    if (valueComputedBySdk) {
        rawRumEvent._dd = {
            vital: {
                computed_value: true,
            },
        };
    }
    return {
        rawRumEvent: rawRumEvent,
        startTime: vital.startClocks.relative,
        customerContext: vital.context,
        domainContext: {},
    };
}
//# sourceMappingURL=vitalCollection.js.map